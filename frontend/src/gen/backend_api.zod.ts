/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * murack-web-backend
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * @summary リスト用の mini サイズのアートワークを取得
 */
export const getMiniArtworkParams = zod.object({
  "id": zod.number().describe("Artwork ID"),
});

export const getMiniArtworkResponseMin = 0;

export const getMiniArtworkResponseItem = zod.number().min(
  getMiniArtworkResponseMin,
);
export const getMiniArtworkResponse = zod.array(getMiniArtworkResponseItem);

/**
 * @summary グループ選択画面用にアルバムのリストを検索
 */
export const getAlbumListQueryParams = zod.object({
  "artist": zod.string().nullish(),
  "album": zod.string().nullish(),
  "genre": zod.string().nullish(),
});

export const getAlbumListResponseItem = zod.object({
  "artwork_id": zod.number().nullish(),
  "name": zod.string().describe("アーティスト名などの値"),
}).describe("グループ選択画面のリスト要素");
export const getAlbumListResponse = zod.array(getAlbumListResponseItem);

/**
 * @summary グループ選択画面用にアーティストのリストを検索
 */
export const getArtistListQueryParams = zod.object({
  "artist": zod.string().nullish(),
  "album": zod.string().nullish(),
  "genre": zod.string().nullish(),
});

export const getArtistListResponseItem = zod.object({
  "artwork_id": zod.number().nullish(),
  "name": zod.string().describe("アーティスト名などの値"),
}).describe("グループ選択画面のリスト要素");
export const getArtistListResponse = zod.array(getArtistListResponseItem);

/**
 * @summary グループ選択画面用にジャンルのリストを検索
 */
export const getGenreListQueryParams = zod.object({
  "artist": zod.string().nullish(),
  "album": zod.string().nullish(),
  "genre": zod.string().nullish(),
});

export const getGenreListResponseItem = zod.object({
  "artwork_id": zod.number().nullish(),
  "name": zod.string().describe("アーティスト名などの値"),
}).describe("グループ選択画面のリスト要素");
export const getGenreListResponse = zod.array(getGenreListResponseItem);

/**
 * @summary グループ選択に応じた曲リストを取得
 */
export const getTrackListQueryLimitMin = 0;
export const getTrackListQueryOffsetMin = 0;

export const getTrackListQueryParams = zod.object({
  "artist": zod.string().nullish(),
  "album": zod.string().nullish(),
  "genre": zod.string().nullish(),
  "sort_type": zod.enum([
    "track_name",
    "artist",
    "album",
    "genre",
    "composer",
    "duration",
    "track_index",
    "disc_index",
    "release_date",
    "rating",
    "entry_date",
    "path",
  ]),
  "sort_desc": zod.boolean(),
  "limit": zod.number().min(getTrackListQueryLimitMin).nullish(),
  "offset": zod.number().min(getTrackListQueryOffsetMin).nullish(),
});

export const getTrackListResponseItem = zod.object({
  "artwork_id": zod.number().nullish(),
  "duration": zod.number().describe("再生時間 (ミリ秒)"),
  "id": zod.number().describe("曲の ID"),
  "title": zod.string().describe("曲名"),
}).describe("曲リスト画面に返すリスト要素データ");
export const getTrackListResponse = zod.array(getTrackListResponseItem);

/**
 * @summary プレイリスト一覧画面のためのリスト要素を取得
 */
export const getPlaylistListQueryParams = zod.object({
  "parentId": zod.number().optional().describe(
    "検索対象リストの親プレイリスト ID。null の場合は最上位のプレイリストのみを検索",
  ),
});

export const getPlaylistListResponseItem = zod.object({
  "id": zod.number().describe("プレイリストID"),
  "name": zod.string(),
  "playlist_type": zod.enum(["Normal", "Filter", "Folder"]).describe(
    "プレイリストの種類",
  ),
}).describe("プレイリスト一覧画面のリスト要素");
export const getPlaylistListResponse = zod.array(getPlaylistListResponseItem);

/**
 * @summary プレイリスト一つの詳細情報を取得
 */
export const getPlaylistDetailsParams = zod.object({
  "id": zod.number().describe("Playlist ID"),
});

export const getPlaylistDetailsResponse = zod.object({
  "id": zod.number().describe("プレイリストID"),
  "name": zod.string(),
  "parent_id": zod.number().nullish().describe("親プレイリストID"),
  "playlist_type": zod.enum(["Normal", "Filter", "Folder"]).describe(
    "プレイリストの種類",
  ),
  "save_dap": zod.boolean().describe("DAPにこのプレイリストを保存するか"),
  "sort_desc": zod.boolean().describe("ソートが降順か"),
  "sort_type": zod.enum([
    "playlist",
    "track_name",
    "artist",
    "album",
    "genre",
    "composer",
    "duration",
    "track_index",
    "disc_index",
    "release_date",
    "rating",
    "entry_date",
    "path",
  ]).describe("曲のソートの種類 (プレイリスト順付き)"),
}).describe(
  "プレイリストの、プレイリスト一覧・曲一覧画面で利用する情報のみを抽出した詳細情報",
);

export const getTagGroupsResponseItem = zod.object({
  "created_at": zod.string().datetime({}),
  "description": zod.string(),
  "id": zod.number(),
  "name": zod.string(),
  "order_index": zod.number(),
});
export const getTagGroupsResponse = zod.array(getTagGroupsResponseItem);

export const createTagGroupBody = zod.object({
  "description": zod.string(),
  "name": zod.string(),
  "order_index": zod.number(),
});

export const createTagGroupResponse = zod.object({
  "created_at": zod.string().datetime({}),
  "description": zod.string(),
  "id": zod.number(),
  "name": zod.string(),
  "order_index": zod.number(),
});

export const updateTagGroupParams = zod.object({
  "id": zod.number().describe("Tag group ID"),
});

export const updateTagGroupBody = zod.object({
  "description": zod.string().nullish(),
  "name": zod.string().nullish(),
  "order_index": zod.number().nullish(),
});

export const updateTagGroupResponse = zod.object({
  "created_at": zod.string().datetime({}),
  "description": zod.string(),
  "id": zod.number(),
  "name": zod.string(),
  "order_index": zod.number(),
});

export const deleteTagGroupParams = zod.object({
  "id": zod.number().describe("Tag group ID"),
});
