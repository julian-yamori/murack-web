/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * murack-web-backend
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { customFetch } from "../custom_fetch.ts";
export interface CreateTagGroupRequest {
  description: string;
  name: string;
  order_index: number;
}

export interface TagGroup {
  created_at: string;
  description: string;
  id: number;
  name: string;
  order_index: number;
}

export type UpdateTagGroupRequestDescription = string | null;

export type UpdateTagGroupRequestName = string | null;

export type UpdateTagGroupRequestOrderIndex = number | null;

export interface UpdateTagGroupRequest {
  description?: UpdateTagGroupRequestDescription;
  name?: UpdateTagGroupRequestName;
  order_index?: UpdateTagGroupRequestOrderIndex;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getTagGroupsResponse200 = {
  data: TagGroup[];
  status: 200;
};

export type getTagGroupsResponseComposite = getTagGroupsResponse200;

export type getTagGroupsResponse = getTagGroupsResponseComposite & {
  headers: Headers;
};

export const getGetTagGroupsUrl = () => {
  return `/api/tag_groups`;
};

export const getTagGroups = async (
  options?: RequestInit,
): Promise<getTagGroupsResponse> => {
  return customFetch<getTagGroupsResponse>(getGetTagGroupsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetTagGroupsKey = () => [`/api/tag_groups`] as const;

export type GetTagGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTagGroups>>
>;
export type GetTagGroupsQueryError = unknown;

export const useGetTagGroups = <TError = unknown>(
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getTagGroups>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ??
    (() => isEnabled ? getGetTagGroupsKey() : null);
  const swrFn = () => getTagGroups(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

export type createTagGroupResponse200 = {
  data: TagGroup;
  status: 200;
};

export type createTagGroupResponseComposite = createTagGroupResponse200;

export type createTagGroupResponse = createTagGroupResponseComposite & {
  headers: Headers;
};

export const getCreateTagGroupUrl = () => {
  return `/api/tag_groups`;
};

export const createTagGroup = async (
  createTagGroupRequest: CreateTagGroupRequest,
  options?: RequestInit,
): Promise<createTagGroupResponse> => {
  return customFetch<createTagGroupResponse>(getCreateTagGroupUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(
      createTagGroupRequest,
    ),
  });
};

export const getCreateTagGroupMutationFetcher = (
  options?: SecondParameter<typeof customFetch>,
) => {
  return (
    _: Key,
    { arg }: { arg: CreateTagGroupRequest },
  ): Promise<createTagGroupResponse> => {
    return createTagGroup(arg, options);
  };
};
export const getCreateTagGroupMutationKey = () => [`/api/tag_groups`] as const;

export type CreateTagGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTagGroup>>
>;
export type CreateTagGroupMutationError = unknown;

export const useCreateTagGroup = <TError = unknown>(
  options?: {
    swr?:
      & SWRMutationConfiguration<
        Awaited<ReturnType<typeof createTagGroup>>,
        TError,
        Key,
        CreateTagGroupRequest,
        Awaited<ReturnType<typeof createTagGroup>>
      >
      & { swrKey?: string };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateTagGroupMutationKey();
  const swrFn = getCreateTagGroupMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export type updateTagGroupResponse200 = {
  data: TagGroup;
  status: 200;
};

export type updateTagGroupResponseComposite = updateTagGroupResponse200;

export type updateTagGroupResponse = updateTagGroupResponseComposite & {
  headers: Headers;
};

export const getUpdateTagGroupUrl = (id: number) => {
  return `/api/tag_groups/${id}`;
};

export const updateTagGroup = async (
  id: number,
  updateTagGroupRequest: UpdateTagGroupRequest,
  options?: RequestInit,
): Promise<updateTagGroupResponse> => {
  return customFetch<updateTagGroupResponse>(getUpdateTagGroupUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(
      updateTagGroupRequest,
    ),
  });
};

export const getUpdateTagGroupMutationFetcher = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
) => {
  return (
    _: Key,
    { arg }: { arg: UpdateTagGroupRequest },
  ): Promise<updateTagGroupResponse> => {
    return updateTagGroup(id, arg, options);
  };
};
export const getUpdateTagGroupMutationKey = (id: number) =>
  [`/api/tag_groups/${id}`] as const;

export type UpdateTagGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTagGroup>>
>;
export type UpdateTagGroupMutationError = unknown;

export const useUpdateTagGroup = <TError = unknown>(
  id: number,
  options?: {
    swr?:
      & SWRMutationConfiguration<
        Awaited<ReturnType<typeof updateTagGroup>>,
        TError,
        Key,
        UpdateTagGroupRequest,
        Awaited<ReturnType<typeof updateTagGroup>>
      >
      & { swrKey?: string };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateTagGroupMutationKey(id);
  const swrFn = getUpdateTagGroupMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export type deleteTagGroupResponse200 = {
  data: void;
  status: 200;
};

export type deleteTagGroupResponseComposite = deleteTagGroupResponse200;

export type deleteTagGroupResponse = deleteTagGroupResponseComposite & {
  headers: Headers;
};

export const getDeleteTagGroupUrl = (id: number) => {
  return `/api/tag_groups/${id}`;
};

export const deleteTagGroup = async (
  id: number,
  options?: RequestInit,
): Promise<deleteTagGroupResponse> => {
  return customFetch<deleteTagGroupResponse>(getDeleteTagGroupUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteTagGroupMutationFetcher = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
) => {
  return (_: Key, __: { arg: Arguments }): Promise<deleteTagGroupResponse> => {
    return deleteTagGroup(id, options);
  };
};
export const getDeleteTagGroupMutationKey = (id: number) =>
  [`/api/tag_groups/${id}`] as const;

export type DeleteTagGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTagGroup>>
>;
export type DeleteTagGroupMutationError = unknown;

export const useDeleteTagGroup = <TError = unknown>(
  id: number,
  options?: {
    swr?:
      & SWRMutationConfiguration<
        Awaited<ReturnType<typeof deleteTagGroup>>,
        TError,
        Key,
        Arguments,
        Awaited<ReturnType<typeof deleteTagGroup>>
      >
      & { swrKey?: string };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteTagGroupMutationKey(id);
  const swrFn = getDeleteTagGroupMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
