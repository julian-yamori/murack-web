/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * murack-web-proto-backend
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { customFetch } from "../custom_fetch.ts";
export type CreateSongRequestAlbum = string | null;

export interface CreateSongRequest {
  album?: CreateSongRequestAlbum;
  artist: string;
  title: string;
}

export type SongAlbum = string | null;

export interface Song {
  album?: SongAlbum;
  artist: string;
  created_at: string;
  id: number;
  title: string;
}

export type UpdateSongRequestAlbum = string | null;

export type UpdateSongRequestArtist = string | null;

export type UpdateSongRequestTitle = string | null;

export interface UpdateSongRequest {
  album?: UpdateSongRequestAlbum;
  artist?: UpdateSongRequestArtist;
  title?: UpdateSongRequestTitle;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getSongsResponse200 = {
  data: Song[];
  status: 200;
};

export type getSongsResponseComposite = getSongsResponse200;

export type getSongsResponse = getSongsResponseComposite & {
  headers: Headers;
};

export const getGetSongsUrl = () => {
  return `/api/songs`;
};

export const getSongs = async (
  options?: RequestInit,
): Promise<getSongsResponse> => {
  return customFetch<getSongsResponse>(getGetSongsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetSongsKey = () => [`/api/songs`] as const;

export type GetSongsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSongs>>
>;
export type GetSongsQueryError = unknown;

export const useGetSongs = <TError = unknown>(
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getSongs>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ??
    (() => isEnabled ? getGetSongsKey() : null);
  const swrFn = () => getSongs(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

export type createSongResponse201 = {
  data: Song;
  status: 201;
};

export type createSongResponseComposite = createSongResponse201;

export type createSongResponse = createSongResponseComposite & {
  headers: Headers;
};

export const getCreateSongUrl = () => {
  return `/api/songs`;
};

export const createSong = async (
  createSongRequest: CreateSongRequest,
  options?: RequestInit,
): Promise<createSongResponse> => {
  return customFetch<createSongResponse>(getCreateSongUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(
      createSongRequest,
    ),
  });
};

export const getCreateSongMutationFetcher = (
  options?: SecondParameter<typeof customFetch>,
) => {
  return (
    _: Key,
    { arg }: { arg: CreateSongRequest },
  ): Promise<createSongResponse> => {
    return createSong(arg, options);
  };
};
export const getCreateSongMutationKey = () => [`/api/songs`] as const;

export type CreateSongMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSong>>
>;
export type CreateSongMutationError = unknown;

export const useCreateSong = <TError = unknown>(
  options?: {
    swr?:
      & SWRMutationConfiguration<
        Awaited<ReturnType<typeof createSong>>,
        TError,
        Key,
        CreateSongRequest,
        Awaited<ReturnType<typeof createSong>>
      >
      & { swrKey?: string };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateSongMutationKey();
  const swrFn = getCreateSongMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export type updateSongResponse200 = {
  data: Song;
  status: 200;
};

export type updateSongResponse404 = {
  data: void;
  status: 404;
};

export type updateSongResponseComposite =
  | updateSongResponse200
  | updateSongResponse404;

export type updateSongResponse = updateSongResponseComposite & {
  headers: Headers;
};

export const getUpdateSongUrl = (id: number) => {
  return `/api/songs/${id}`;
};

export const updateSong = async (
  id: number,
  updateSongRequest: UpdateSongRequest,
  options?: RequestInit,
): Promise<updateSongResponse> => {
  return customFetch<updateSongResponse>(getUpdateSongUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(
      updateSongRequest,
    ),
  });
};

export const getUpdateSongMutationFetcher = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
) => {
  return (
    _: Key,
    { arg }: { arg: UpdateSongRequest },
  ): Promise<updateSongResponse> => {
    return updateSong(id, arg, options);
  };
};
export const getUpdateSongMutationKey = (id: number) =>
  [`/api/songs/${id}`] as const;

export type UpdateSongMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSong>>
>;
export type UpdateSongMutationError = void;

export const useUpdateSong = <TError = void>(
  id: number,
  options?: {
    swr?:
      & SWRMutationConfiguration<
        Awaited<ReturnType<typeof updateSong>>,
        TError,
        Key,
        UpdateSongRequest,
        Awaited<ReturnType<typeof updateSong>>
      >
      & { swrKey?: string };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateSongMutationKey(id);
  const swrFn = getUpdateSongMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export type deleteSongResponse204 = {
  data: void;
  status: 204;
};

export type deleteSongResponse404 = {
  data: void;
  status: 404;
};

export type deleteSongResponseComposite =
  | deleteSongResponse204
  | deleteSongResponse404;

export type deleteSongResponse = deleteSongResponseComposite & {
  headers: Headers;
};

export const getDeleteSongUrl = (id: number) => {
  return `/api/songs/${id}`;
};

export const deleteSong = async (
  id: number,
  options?: RequestInit,
): Promise<deleteSongResponse> => {
  return customFetch<deleteSongResponse>(getDeleteSongUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteSongMutationFetcher = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
) => {
  return (_: Key, __: { arg: Arguments }): Promise<deleteSongResponse> => {
    return deleteSong(id, options);
  };
};
export const getDeleteSongMutationKey = (id: number) =>
  [`/api/songs/${id}`] as const;

export type DeleteSongMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSong>>
>;
export type DeleteSongMutationError = void;

export const useDeleteSong = <TError = void>(
  id: number,
  options?: {
    swr?:
      & SWRMutationConfiguration<
        Awaited<ReturnType<typeof deleteSong>>,
        TError,
        Key,
        Arguments,
        Awaited<ReturnType<typeof deleteSong>>
      >
      & { swrKey?: string };
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteSongMutationKey(id);
  const swrFn = getDeleteSongMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
